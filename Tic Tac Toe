<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="style.css">
    <script src="main.js" defer></script>
</head>
<body>
    <div class="board" id="board">
        <div class="cell" data-cell></div>
        <div class="cell" data-cell></div>
        <div class="cell" data-cell></div>
        <div class="cell" data-cell></div>
        <div class="cell" data-cell></div>
        <div class="cell" data-cell></div>
        <div class="cell" data-cell></div>
        <div class="cell" data-cell></div>
        <div class="cell" data-cell></div>
    </div>
    <div class="score">
        <div class="xscore">X's Score:<span id="xscore"></span></div>
        <div class="oscore">O's Score:<span id="oscore"></span></div>
    </div>
    <div class="winning-message" id="winningMessage">
        <div data-winning-message-text>x win</div>
        <button id="restartButton">Restart</button>
    </div>
</body>
</html> 
 95  Javascript/main.js 
@@ -0,0 +1,95 @@
const X_CLASS = 'x'
const CIRCLE_CLASS = 'circle'
let xScore = 0
let oScore = 0
const WINNING_COMBINATION = [
    [0,1,2],
    [3,4,5],
    [6,7,8],
    [0,3,6],
    [1,4,7],
    [2,5,8],
    [0,4,8],
    [2,4,6]
]
const cellElements = document.querySelectorAll('[data-cell]')
const board = document.getElementById('board')
const xscore = document.getElementById('xscore')
const oscore = document.getElementById('oscore')
const restartButton = document.getElementById('restartButton')
const winningMessageElement = document.getElementById('winningMessage')
const winningMessageTextElement = document.querySelector('[data-winning-message-text]')
let circleTurn

startGame()
restartButton.addEventListener('click', startGame)

xscore.innerHTML = xScore
oscore.innerHTML = oScore

function startGame() {
    circleTurn = false
    cellElements.forEach(cell => {
        cell.classList.remove(X_CLASS)
        cell.classList.remove(CIRCLE_CLASS)
        cell.addEventListener('click',handelClick,{once: true})
    })
    setBorderHoverClass()
    winningMessageElement.classList.remove('show')
}
function handelClick(e){
    const cell = e.target
    const currentClass = circleTurn ? CIRCLE_CLASS : X_CLASS
    //place marks 
    placeMark(cell, currentClass)
    //Check for win
    if(checkWin(currentClass)){
        endGame(false);
    } else if (isDraw()){ //Check for draw
        endGame(true)
    } else{
        //Switch Turns
        swapTurns()
        setBorderHoverClass()
    }
}

function endGame(draw){
    if (draw){
        winningMessageTextElement.innerText = 'Draw!'
    } else {
        let x = circleTurn ? oscore.innerHTML = ++oScore : xscore.innerHTML = ++xScore
        winningMessageTextElement.innerText = `${circleTurn ? "O's" : "X's"} Wins!`
    }
    winningMessageElement.classList.add('show')
}

function isDraw(){
    return [...cellElements].every(cell =>{
        return cell.classList.contains(X_CLASS) || cell.classList.contains(CIRCLE_CLASS)
    })
}

function placeMark(cell, currentClass){
    cell.classList.add(currentClass)
}

function swapTurns(){
    circleTurn = !circleTurn
}
function setBorderHoverClass() {
    board.classList.remove(X_CLASS)
    board.classList.remove(CIRCLE_CLASS)
    if (circleTurn) {
        board.classList.add(CIRCLE_CLASS)
    } else {
        board.classList.add(X_CLASS)
    }
}
function checkWin(currentClass) {
    return WINNING_COMBINATION.some(combination => {
        return combination.every(index => {
            return cellElements[index].classList.contains(currentClass)
        })
    })
} 
 149  Javascript/style.css 
@@ -0,0 +1,149 @@
*, *::after, *::before{
    box-sizing: border-box;
}
body{
    margin: 0;
}
:root{
    --cell-width: 100px;
    --mark-size: calc(var(--cell-width) * .9);
}
.board{
    width: 100vw;
    height: 100vh;
    display: grid;
    justify-content: center;
    align-content: center;
    justify-items: center;
    align-items: center;
    grid-template-columns: repeat(3, auto);
}
.cell{
    width: var(--cell-width);
    height: var(--cell-width);
    border: 1px solid black;
    display: flex;
    justify-content: center;
    align-items: center;
    position: relative;
    cursor: pointer;
}
.cell:first-child,
.cell:nth-child(2),
.cell:nth-child(3){
    border-top: none;
}
.cell:nth-child(3n + 1){
    border-left: none;
}
.cell:nth-child(3n + 3){
    border-right: none;
}
.cell:last-child,
.cell:nth-child(8),
.cell:nth-child(7){
    border-bottom: none;
}

.cell.x,
.cell.circle{
    cursor: not-allowed;
}

.board.x .cell:not(.x):not(.circle):hover::before,
.board.x .cell:not(.x):not(.circle):hover::after,
.board.circle .cell:not(.x):not(.circle):hover::before,
.board.circle .cell:not(.x):not(.circle):hover::after{
    background-color: lightgray;
}

.cell.x::before,
.cell.x::after{
    background-color: black;
}

.cell.x::before,
.cell.x::after,
.board.x .cell:not(.x):not(.circle):hover::before,
.board.x .cell:not(.x):not(.circle):hover::after
{
    content: '';
    position: absolute;
    width: calc(var(--mark-size) * .15);
    height: var(--mark-size);
}
.cell.x::before,
.board.x .cell:not(.x):not(.circle):hover::before
{
    transform: rotate(45deg);
}
.cell.x::after,
.board.x .cell:not(.x):not(.circle):hover::after
{
    transform: rotate(-45deg);
}

.cell.circle::before,
.cell.circle::after{
    background-color: rgb(238, 18, 18);
}

.cell.circle::before,
.cell.circle::after,
.board.circle .cell:not(.x):not(.circle):hover::before,
.board.circle .cell:not(.x):not(.circle):hover::after
{
    content: '';
    position: absolute;
    border-radius: 50%;
}
.cell.circle::before,
.board.circle .cell:not(.x):not(.circle):hover::before
{
    width: var(--mark-size);
    height: var(--mark-size);
}
.cell.circle::after,
.board.circle .cell:not(.x):not(.circle):hover::after
{
    width: calc(var(--mark-size) * .7);
    height: calc(var(--mark-size) * .7);
    background-color: white;
}
.winning-message{
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(0,0, 0, 0.9);
    justify-content: center;
    align-items: center;
    color: white;
    font-size: 5rem;
    flex-direction: column;
}
.winning-message button{
    font-size: 3rem;
    background-color: white;
    border: 1px solid balck;
    border-radius: 10px;
    padding: .25em .5em;
    cursor: pointer;
}
.winning-message button:hover{
    background-color: transparent;
    color: white;
    border: 1px solid #fff;
}
.winning-message.show{
    display: flex;
}
.score{
    position: absolute;
    top: 10px;
    left: 45%;
    font-size: 1.5rem;
    color: rgb(17, 32, 77);
} 
